<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cxf="http://camel.apache.org/schema/cxf"
       xmlns:cxfcore="http://cxf.apache.org/core"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
    ">

    <!-- Out of the box beans related to camel and cxf stuff -->
    <bean id="GZIPFeature" class="org.apache.cxf.transport.common.gzip.GZIPFeature"/>

    <bean class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor"
          id="wss4jInInterceptor">
        <constructor-arg>
            <map>
                <entry key="action" value="UsernameToken"/>
                <entry key="passwordType" value="PasswordDigest"/>
                <entry key="passwordCallbackClass" value="com.kiktan.wssecurity.ServerPasswordCallback"/>
            </map>
        </constructor-arg>
    </bean>

    <bean class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor"
          id="wss4jOutInterceptor">
        <constructor-arg>
            <map>
                <entry key="action" value="UsernameToken"/>
                <entry key="passwordType" value="PasswordDigest"/>
                <entry key="user" value="jon"/>
                <entry key="passwordCallbackClass" value="com.kiktan.wssecurity.ServerPasswordCallback"/>
            </map>
        </constructor-arg>
    </bean>

    <!-- cxf endpoint that listens form incoming soap requests -->
    <cxf:cxfEndpoint address="/kolder/test" endpointName="a:SOATestEndpoint"
                     id="CXFTest"
                     serviceName="a:SOATestEndpointService" wsdlURL="wsdl/test.wsdl"
                     xmlns:a="http://javainuse.com">

        <cxf:inInterceptors>
            <ref bean="wss4jInInterceptor"/>
        </cxf:inInterceptors>

        <cxf:properties>
            <entry key="dataFormat" value="PAYLOAD"/>
        </cxf:properties>

    </cxf:cxfEndpoint>

    <!-- client call to SOAtest soap service -->
    <cxf:cxfEndpoint address="http://localhost:8088/mockSOATestBinding" endpointName="a:SOATestEndpoint"
                     id="CXFTestClient"
                     serviceName="a:SOATestEndpointService" wsdlURL="wsdl/test.wsdl"
                     xmlns:a="http://javainuse.com">

        <cxf:outInterceptors>
            <ref bean="wss4jOutInterceptor"/>
        </cxf:outInterceptors>

        <cxf:properties>
            <entry key="dataFormat" value="PAYLOAD"/>
        </cxf:properties>

        <cxf:features>
            <ref bean="GZIPFeature"/>
        </cxf:features>

    </cxf:cxfEndpoint>

    <!-- client call to Settings_2018_11 soap service -->
    <cxf:cxfEndpoint address="http://localhost:8089/mockSettingsSoap11HTTPBinding" endpointName="b:SettingsHTTP"
                     id="CXFSettingsClient"
                     serviceName="b:Settings" wsdlURL="wsdl/Settings_2018_11.wsdl"
                     xmlns:b="http://www.kiktan.com/Settings/2018/11">
        <cxf:properties>
            <entry key="dataFormat" value="PAYLOAD"/>
        </cxf:properties>

        <cxf:features>
            <ref bean="GZIPFeature"/>
        </cxf:features>

    </cxf:cxfEndpoint>

    <!-- custom developed beans for camel route -->
    <bean class="com.kiktan.processors.MessageMappingSoaTest" id="messageMappingSoaTest"/>
    <bean class="com.kiktan.test.testGroovy" id="messageMappingSoaTestGroovy"/>

    <!--  camel route starts here -->
    <camelContext id="camelId" xmlns="http://camel.apache.org/schema/spring">
        <camel:route id="WsdlContractFirstMaven">
            <camel:from id="soapServiceTest" uri="cxf:bean:CXFTest"/>
            <camel:onException>
                <camel:exception>java.lang.Exception</camel:exception>
                <camel:handled>
                    <camel:constant>true</camel:constant>
                </camel:handled>
                <camel:to uri="direct:errorHandler"/>
            </camel:onException>

            <camel:setHeader headerName="chainId">
                <camel:method bean="com.kiktan.common.ProcessHeaders" method="getChainId"></camel:method>
            </camel:setHeader>

            <camel:setProperty propertyName="chainId">
                <camel:method bean="com.kiktan.common.ProcessHeaders" method="getChainId"></camel:method>
            </camel:setProperty>
            <!-- set body for backend call to SOATest service -->
            <camel:bean ref="messageMappingSoaTestGroovy"/>
            <!-- remove soapheaders -->
            <!--<camel:removeHeader headerName="org.apache.cxf.headers.Header.list"/>-->
            <camel:to uri="validator:file:src/main/resources/wsdl/test.xsd"/>
            <camel:to id="toSoapTestEndpoint" uri="cxf:bean:CXFTestClient"/>
            <!-- set body for backend call to Settings_2018_11 service operation GetSettings -->
            <camel:setBody>
                <camel:simple>
                    <![CDATA[
                            <ns1:GetSettingsRequest xmlns:ns1="http://www.kiktan.com/Settings/Operations/2018/11" xmlns:ns2="http://www.kiktan.com/Settings/Datamodel/2018/11">
                                <ns2:number>gero et</ns2:number>
                            </ns1:GetSettingsRequest>
                    ]]>
                </camel:simple>
            </camel:setBody>
            <!-- if operation not set, remove operation en operation namespace from previous call -->
            <!--<camel:removeHeader headerName="operationName"/>-->
            <camel:removeHeader headerName="operationNamespace"/>
            <!-- in case there are multiple operation in wsdl, set operation -->
            <camel:setHeader headerName="operationName">
                <camel:constant>GetSettings</camel:constant>
            </camel:setHeader>
            <camel:to uri="validator:file:src/main/resources/wsdl/SettingsOperations_2018_11.xsd"/>
            <camel:to id="toSoapSettingsEndpoint" uri="cxf:bean:CXFSettingsClient"/>

            <!-- set body for backend call to Settings_2018_11 service operation CreateSettings -->
            <camel:setBody>
                <camel:simple>
                    <![CDATA[
                            <ns1:CreateSettingsRequest xmlns:ns1="http://www.kiktan.com/Settings/Operations/2018/11" xmlns:ns2="http://www.kiktan.com/Settings/Datamodel/2018/11">
                                <ns2:number>gero et</ns2:number>
                            </ns1:CreateSettingsRequest>
                    ]]>
                </camel:simple>
            </camel:setBody>
            <!-- if operation not set, remove operation en operation namespace from previous call -->
            <!--<camel:removeHeader headerName="operationName"/>-->
            <camel:removeHeader headerName="operationNamespace"/>
            <!-- in case there are multiple operation in wsdl, set operation -->
            <camel:setHeader headerName="operationName">
                <camel:constant>CreateSettings</camel:constant>
            </camel:setHeader>
            <camel:to uri="validator:file:src/main/resources/wsdl/SettingsOperations_2018_11.xsd"/>
            <camel:to id="toSoapSettingsEndpoint" uri="cxf:bean:CXFSettingsClient"/>

            <!-- set response body back to frontend -->
            <camel:setBody>
                <camel:simple>
                    <![CDATA[<ns:outputSOATest xmlns:ns="http://javainuse.com">
                                <result>${property.chainId}</result>
                            </ns:outputSOATest>
                    ]]>
                </camel:simple>
            </camel:setBody>
        </camel:route>

        <!-- catch all errors the inherit fomr java.lang.Exception -->
        <camel:route id="errorHandler">
            <camel:from uri="direct:errorHandler"/>
            <camel:setBody>
                <camel:simple> <![CDATA[<ns:outputSOATest xmlns:ns="http://javainuse.com">
                                <result>${exception.message}</result>
                                </ns:outputSOATest>
                    ]]>
                </camel:simple>
            </camel:setBody>
        </camel:route>

    </camelContext>

</beans>
